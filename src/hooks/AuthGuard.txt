"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { useAppStore } from "@/store";

interface AuthGuardProps {
  children: React.ReactNode;
  fallback?: React.ReactNode;
}

export default function AuthGuard({ children, fallback }: AuthGuardProps) {
  const router = useRouter();
  const { accessToken, refreshToken, user } = useAppStore();
  const [isLoading, setIsLoading] = useState(true);
  const [isChecked, setIsChecked] = useState(false);

  useEffect(() => {
    // Small delay to allow Zustand to rehydrate from sessionStorage
    const checkAuth = () => {
      // Check if user is authenticated (has tokens and user data)
      const isAuthenticated = !!(accessToken && refreshToken && user);

      if (!isAuthenticated) {
        router.push("/login");
        return;
      }

      setIsChecked(true);
      setIsLoading(false);
    };

    // Allow time for store rehydration
    const timer = setTimeout(checkAuth, 100);

    return () => clearTimeout(timer);
  }, [accessToken, refreshToken, user, router]);

  // Show loading state while checking authentication
  if (isLoading || !isChecked) {
    return (
      fallback || (
        <div className="min-h-screen bg-tk-offwhite flex items-center justify-center">
          <div className="text-center">
            <div className="w-8 h-8 border-4 border-tk-secondary border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
            <p className="text-[#4B5563]">Checking authentication...</p>
          </div>
        </div>
      )
    );
  }

  // If authenticated, render the protected content
  return <>{children}</>;
}
